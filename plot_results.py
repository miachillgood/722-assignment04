import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

def plot_curves():
    plot_cost_curve = True

    """
    Reads the ROC and PR curve data from the CSV files generated by Spark
    and creates the corresponding plots.
    """
    print("Starting plotting script for ROC and PR curves...")
    
    # --- Configuration ---
    # Define file paths
    output_dir = Path("outputs")
    roc_csv_path = output_dir / "roc_points.csv"
    pr_csv_path = output_dir / "pr_points.csv"
    roc_plot_path = output_dir / "plot_roc_curve.png"
    pr_plot_path = output_dir / "plot_pr_curve.png"
    
    # Manually enter the final metrics from your terminal output for the plot labels
    # From your output: ROC AUC: 0.9613, PR AUC: 0.5903
    roc_auc_score = 0.9613
    pr_auc_score = 0.5903
    
    # Set a professional plot style
    sns.set_theme(style="whitegrid")

    # --- Plot ROC Curve ---
    try:
        roc_df = pd.read_csv(roc_csv_path)
        
        plt.figure(figsize=(8, 6))
        plt.plot(roc_df['FPR'], roc_df['TPR'], 
                 label=f'BDAS Model (AUC = {roc_auc_score:.4f})', 
                 linewidth=2.5, color='royalblue')
        plt.plot([0, 1], [0, 1], 'k--', label='Random Chance (AUC = 0.5000)')
        
        plt.xlabel('False Positive Rate (FPR)', fontsize=12)
        plt.ylabel('True Positive Rate (TPR)', fontsize=12)
        plt.title('Figure 8.2a: ROC Curve on Test Set', fontsize=14, fontweight='bold')
        plt.legend(loc='lower right', fontsize=11)
        plt.grid(True)
        plt.tight_layout()
        
        plt.savefig(roc_plot_path)
        print(f"Success! ROC curve plot saved to: {roc_plot_path}")
        
    except FileNotFoundError:
        print(f"Error: Could not find the ROC data file at {roc_csv_path}")
    except Exception as e:
        print(f"An error occurred while plotting the ROC curve: {e}")

    # --- Plot PR Curve ---
    try:
        pr_df = pd.read_csv(pr_csv_path)
        
        # Calculate the random baseline (positive rate in test set)
        # From your output: test set has 1267 positives out of 415387 total
        baseline = 1267 / 415387 
        
        plt.figure(figsize=(8, 6))
        plt.plot(pr_df['Recall'], pr_df['Precision'], 
                 label=f'BDAS Model (AP = {pr_auc_score:.4f})', 
                 linewidth=2.5, color='forestgreen')
        plt.axhline(y=baseline, color='grey', linestyle='--', 
                    label=f'Random Baseline (AP â‰ˆ {baseline:.4f})')
        
        plt.xlabel('Recall', fontsize=12)
        plt.ylabel('Precision', fontsize=12)
        plt.title('Figure 8.2b: Precision-Recall Curve on Test Set', fontsize=14, fontweight='bold')
        plt.legend(loc='upper right', fontsize=11)
        plt.grid(True)
        # Set limits to make the plot clean
        plt.xlim(0, 1)
        plt.ylim(0, 1.05)
        plt.tight_layout()
        
        plt.savefig(pr_plot_path)
        print(f"Success! PR curve plot saved to: {pr_plot_path}")

    except FileNotFoundError:
        print(f"Error: Could not find the PR data file at {pr_csv_path}")
    except Exception as e:
        print(f"An error occurred while plotting the PR curve: {e}")


    # --- Plot Cost-Threshold Curve (if available) ---
    try:
        cost_csv_path = output_dir / 'cost_curve.csv'
        cost_plot_path = output_dir / 'plot_cost_curve.png'
        if cost_csv_path.exists():
            cost_df = pd.read_csv(cost_csv_path)
            best_idx = cost_df['total_cost'].idxmin()
            best_tau = cost_df.loc[best_idx, 'threshold']
            best_cost = cost_df.loc[best_idx, 'total_cost']

            plt.figure(figsize=(8, 6))
            sns.lineplot(data=cost_df, x='threshold', y='total_cost', color='indianred', linewidth=2.2)
            plt.axvline(best_tau, color='black', linestyle='--', label=f'$\\tau^* = {best_tau:.2f}$')
            plt.xlabel('Threshold $\\tau$', fontsize=12)
            plt.ylabel('Business Cost (FP:FN=1:25)', fontsize=12)
            plt.title('Figure 8.3c: Cost vs Threshold (Validation Set)', fontsize=14, fontweight='bold')
            plt.legend()
            plt.tight_layout()
            plt.savefig(cost_plot_path)
            print(f"Success! Cost curve plot saved to: {cost_plot_path}")
        else:
            print(f"Note: {cost_csv_path} not found; skip cost curve plot.")
    except Exception as e:
        print(f"An error occurred while plotting the cost curve: {e}")

if __name__ == '__main__':
    plot_curves()
